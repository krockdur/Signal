local config = require("main.defines")

function init(self)

	msg.post(".", "acquire_input_focus")

	self.pos = vmath.vector3(320, 200, 1)
	self.agree_to_shoot = true

	-- life time in seconds
	self.time = 30

	self.score_value = 0

	self.number_of_bombs = 3

	-- table to store enemy dead
	-- this is to check if there is a combo
	self.enemies_dead_tab = { }


	-- update ui
	msg.post("/gui#game_gui", "player_nb_bombs", { player_nb_bombs = self.number_of_bombs} )
	
end

function final(self)

	msg.post(".", "release_input_focus")	
end


function update(self, dt)
	go.set_position(self.pos)


end

local shot_time = 0
local life_time = 0
function fixed_update(self, dt)
	--
	shot_time = shot_time + dt
	--
	life_time = life_time + dt

	-- can launch rocket every.... 0.3s
	if (shot_time > 0.3) then	
		shot_time = 0
		self.agree_to_shoot = true
	else
		self.agree_to_shoot = false
	end

	-- decrease life time every 1s
	if (life_time >= 1) then
		self.time = self.time - 1
		msg.post("/gui#game_gui", "player_time", { player_time = self.time } )
		life_time = 0
	end

	-- check player left time
	if (self.time <= 0) then
		-- player lose
		
	end
	
end

function on_message(self, message_id, message, sender)
	-- message from enemy dead :
	if (message_id == hash("enemy_destroyed")) then
		if ( message.type_enemy == config.TYPE_ENEMY_YELLOW) then
			insert_enemy_in_table(self, "yellow")
			self.time = self.time + 0.5
			self.score_value = self.score_value + 1
		end
		if ( message.type_enemy == config.TYPE_ENEMY_GREEN) then
			insert_enemy_in_table(self, "green")
			self.time = self.time + 1
			self.score_value = self.score_value + 2
		end
		if ( message.type_enemy == config.TYPE_ENEMY_WHITE) then
			insert_enemy_in_table(self, "white")
			self.time = self.time + 1.5
			self.score_value = self.score_value + 3
		end
		if ( message.type_enemy == config.TYPE_ENEMY_RED) then
			insert_enemy_in_table(self, "red")
			self.time = self.time + 2
			self.score_value = self.score_value + 4
		end

		msg.post("/gui#game_gui", "up_score", {score_value = self.score_value})
		
		check_if_combo(self)

		-- update ui
		msg.post("/gui#game_gui", "player_combo_table", { player_combo_table = self.enemies_dead_tab} )
	end

	if (message_id == hash("collision_response") and message.other_group == hash("shot_enemy")) then
		self.time = self.time - 1
	end
	
end

function insert_enemy_in_table(self, color)
	-- max table lenght = 5
	-- remove first if too long
	if #self.enemies_dead_tab == 5 then
		table.remove(self.enemies_dead_tab, 1)
	end

	table.insert(self.enemies_dead_tab, color)


end

function check_if_combo(self)
	-- combo bomb
	if( self.enemies_dead_tab[1] == "red" and self.enemies_dead_tab[2] == "white" and self.enemies_dead_tab[3] == "red") then
		
		self.number_of_bombs = self.number_of_bombs + 1
		if self.number_of_bombs > 3 then self.number_of_bombs = 3 end
		self.enemies_dead_tab = {}
		-- update ui
		msg.post("/gui#game_gui", "player_nb_bombs", { player_nb_bombs = self.number_of_bombs} )
			
	elseif( self.enemies_dead_tab[2] == "red" and self.enemies_dead_tab[3] == "white" and self.enemies_dead_tab[4] == "red") then
			
		self.number_of_bombs = self.number_of_bombs + 1
		if self.number_of_bombs > 3 then self.number_of_bombs = 3 end
		self.enemies_dead_tab = {}
		-- update ui
		msg.post("/gui#game_gui", "player_nb_bombs", { player_nb_bombs = self.number_of_bombs} )
		
	elseif( self.enemies_dead_tab[3] == "red" and self.enemies_dead_tab[4] == "white" and self.enemies_dead_tab[5] == "red") then
			
		self.number_of_bombs = self.number_of_bombs + 1
		if self.number_of_bombs > 3 then self.number_of_bombs = 3 end
		self.enemies_dead_tab = {}
		-- update ui
		msg.post("/gui#game_gui", "player_nb_bombs", { player_nb_bombs = self.number_of_bombs} )
			
	end

	-- combo time
	if( 
	self.enemies_dead_tab[1] == "yellow" and
	self.enemies_dead_tab[2] == "green" and
	self.enemies_dead_tab[3] == "yellow" and
	self.enemies_dead_tab[4] == "white" and
	self.enemies_dead_tab[5] == "red") then
		self.time = 30
		self.enemies_dead_tab = {}
	end
	
end


function on_input(self, action_id, action)

	-- touch / mouse position
	self.pos.x = action.x
	self.pos.y = action.y

	-- tests	
	if(action_id == hash("toto")) then
		print("coucou")
	end

	-- if left click then fire !
	if(action_id == hash("touch") and self.agree_to_shoot == true) then
		factory.create("#rocket_factory", go.get_position())
	end

	-- if right click then bomb !
	if(action_id == hash("touch_bomb")) then
		if (action.released) then
			if (self.number_of_bombs > 0) then
				self.number_of_bombs = self.number_of_bombs - 1
				-- create bomb animation		
				factory.create("#factory_create_bomb_animation", go.get_position())
				
				-- send msg to factory enemy to delete all enemies
				msg.post("/enemies_pop#pop", "bomb")

				-- update ui
				msg.post("/gui#game_gui", "player_nb_bombs", { player_nb_bombs = self.number_of_bombs} )
				
				-- a bomb heal the player
				self.time = 30
			end
		end
		
	end
	
end

function on_reload(self)

end
